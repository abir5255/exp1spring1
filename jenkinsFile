pipeline {
    agent any 
    tools { 
        maven 'maven'
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.1.55:8081"
        NEXUS_REPOSITORY = "maven-nexus-repo"
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
    }
    stages {
        stage("Clean up") {
            steps {
                deleteDir()
            }
        }
        stage("Clone repo") {
            steps {
                // Corrected the git repository URL
                bat "git clone https://github.com/abir5255/exp1spring1.git"
            }
        }
        stage('Build') {
            steps {
                dir("exp1spring1") { // Ensure this matches the cloned directory
                    bat "mvn clean install"
                }
            }
        }
        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation' // Ensure 'SonarQubeScanner' is correctly configured
            }
            steps {
                withSonarQubeEnv('sonar-server') { // Ensure 'sonar-server' is correctly configured
                    dir("exp1spring1") {
                        bat "${scannerHome}\\bin\\sonar-scanner"
                    }
                }
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                dir("exp1spring1") {
                    script {
                        def pom = readMavenPom file: "pom.xml"
                        def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                        if (filesByGlob.length > 0) {
                            def artifactPath = filesByGlob[0].path
                            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version: ${pom.version}"
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: pom.version,
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId,
                                     classifier: '',
                                     file: artifactPath,
                                     type: pom.packaging],
                                    [artifactId: pom.artifactId,
                                     classifier: '',
                                     file: "pom.xml",
                                     type: "pom"]
                                ]
                            )
                        } else {
                            error "*** File matching target/*.${pom.packaging} could not be found"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
